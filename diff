diff --git a/minirt.h b/minirt.h
index e71c91d..3dd57ed 100644
--- a/minirt.h
+++ b/minirt.h
@@ -159,6 +159,8 @@ typedef struct s_rt
 	int			file_fd;
 	int			object_count;
 	char		*file;
+	int			height;
+	int			width;
 	t_ambient	ambient;
 	t_camera	camera;
 	t_img		img;
@@ -170,9 +172,9 @@ unsigned int	random_int(int state);
 void			my_mlx_pixel_put(t_img *data, int x, int y, int color);
 // int				check_collision(t_object *object, int x, int y);
 // void			check_hit(t_rt *rt, int x, int y);
-void			init_rays(t_rt *rt, int width, int height);
+void*			init_rays(void *thread_data);
 // void			init(t_rt *rt, int width, int height);
-void			render(t_rt *rt, int width, int height);
+void			render(t_rt *rt);
 int				key_hook(int keycode, t_rt *rt);
 void			init_scene(t_rt *rt);
 void			ft_add_back(t_object **list, t_object *new, int type);
diff --git a/scenes/mandatory.rt b/scenes/mandatory.rt
index a76afcf..5fcbfb4 100644
--- a/scenes/mandatory.rt
+++ b/scenes/mandatory.rt
@@ -1,6 +1,15 @@
-A 0.2 255,255,255
-C -50,0,20 0,0,0 70
-L -40,0,30 0.7
-pl 0,0,0 0,1.0,0 255,0,255
-sp 0,0,20 20 255,0,0
-cy 50.0,0.0,20.6 0,0,1.0 14.2 21.42 10,0,255
+R   1200 800
+tr  0,0,0           0,0,0           0,0,0                   255,255,222
+A	0.3				255,255,255
+C	50,10,20		0,0,1			20
+L	70,100,20		0.8				255,250,250
+L	10,60,50		0.6				250,255,255
+pl	0,-10,0			0,-1,0			120,20,60
+pl	0,0,200			0,0,-1			25,0,100
+pl	0,0,0			-1,0,0			25,180,100
+sp	50,10,100		10				255,0,0
+sp	40,0,100		12				255,120,0
+sp	40,0,80			2				0,120,0
+sp	65,0,100		5				0,255,127
+sp	65,10,100		7				0,255,255;255,0,255		spc:0.9,5 mir:0.3 
+cy	5,0,90			0,1,0			4.2						21.42	0,255,255;255,0,255 spc:0.5,20 mir:0.6 ref:1.2 pat:0,0
\ No newline at end of file
diff --git a/src/main.c b/src/main.c
index a71789d..eabf07b 100644
--- a/src/main.c
+++ b/src/main.c
@@ -34,23 +34,25 @@ void	show_light(t_rt *rt)
 	}
 }
 
-void	init_rays(t_rt *rt, int width, int height)
+void	*init_rays(void	*thread_data)
 {
 	// char	*progress;
+	t_rt	*rt = (t_rt *)thread_data;
 
 	show_light(rt);
-	for (int i = 0; i < height; i++)
+	for (int i = 0; i < rt->height; i++)
 	{
 		// char *temp = ft_strdup("progress: ");
 		// progress = ft_strjoin(temp, ft_itoa(i));
 		// mlx_string_put(rt->mlx, rt->win, WIDTH / 2, HEIGHT / 2, 0xffffff, progress);
 		// free(progress);
 		// free(temp);
-		for (int j = 0; j < width; j++)
+		for (int j = 0; j < rt->width; j++)
 		{
 			r_trace(rt, j, i);
 		}
 	}
+	return (NULL);
 }
 
 void ft_add_back(t_object **list, t_object *new, int type)
@@ -75,17 +77,18 @@ void ft_add_back(t_object **list, t_object *new, int type)
 	}
 }
 
-void	render(t_rt *rt, int width, int height)
+void	render(t_rt *rt)
 {
-	pthread_t	thread;
+	pthread_t	thread[20];
 
 	mlx_clear_window(rt->mlx, rt->win);
 	rt->light.color = (t_color){255, 255, 255};
-	for (int i = 0; i < 20; i++)
-	{
-		pthread_create()
+	for (int i = 0; i < 20; i++) {
+		pthread_create(&thread[i], NULL, init_rays, rt);
+	}
+	for (int k = 0; k < 20; k++) {
+		pthread_join(thread[k], NULL);
 	}
-	init_rays(rt, width, height);
 	mlx_put_image_to_window(rt->mlx, rt->win, rt->img.img, 0, 0);
 }
 
@@ -102,7 +105,7 @@ int	key_hook(int keycode, t_rt *rt)
 		rt->camera.position.y -= 10;
 	else if (keycode == DOWN_ARROW)
 		rt->camera.position.y += 10;
-	render(rt, WIDTH, HEIGHT);
+	render(rt);
 	return (0);
 }
 
@@ -123,13 +126,15 @@ int main(int ac, char **av)
 		exit(EXIT_FAILURE);
 	}
 	open_file(rt, av[1]);
+	rt->height = HEIGHT;
+	rt->width = WIDTH;
 	rt->mlx = mlx_init();
 	rt->win = mlx_new_window(rt->mlx, WIDTH, HEIGHT, "miniRT");
 	rt->img.img = mlx_new_image(rt->mlx, WIDTH, HEIGHT);
 	rt->img.addr = mlx_get_data_addr(rt->img.img, &rt->img.bits_per_pixel,
 			&rt->img.line_length, &rt->img.endian);
 	rt->object_count = 0;
-	render(rt, WIDTH, HEIGHT);
+	render(rt);
 	mlx_key_hook(rt->win, key_hook, rt);
 	// mlx_mouse_hook(rt->win, handle_mouse_movements, rt);
 	mlx_hook(rt->win, 17, 0, destroy, rt);
diff --git a/src/raytracer.c b/src/raytracer.c
index 0bd3981..9f2fc4a 100644
--- a/src/raytracer.c
+++ b/src/raytracer.c
@@ -68,12 +68,23 @@ t_vector scale_vector(double s, t_vector v)
 // 	return (int_color);
 // }
 
-int intersect(t_rt *rt, int x, int y)
+int	rgb_to_hex(t_color color)
 {
+	int	hex;
+
+	hex = ((int)color.r << 16) | ((int)color.g << 8) | (int)color.b;
+	return (hex);
+}
+
+int	intersect(t_rt *rt, int x, int y)
+{
+	t_sphere	*sphere = (t_sphere *)rt->object->object;
 	(void)rt;
 	(void)x;
 	(void)y;
-	return (0xf93955);
+
+	
+	return (-1);
 }
 
 void	r_trace(t_rt *rt, int x, int y)
@@ -82,7 +93,7 @@ void	r_trace(t_rt *rt, int x, int y)
 	// t_ray	ray;
 
 	color = intersect(rt, x, y);
-	if (color > 0)
+	if (color >= 0)
 		my_mlx_pixel_put(&rt->img, x, y, color);
 	// else
 	// {
